NightSky Reversing Steps:
Check NightSky RW in hexeditor, DIE, Exeinfo, strings etc..
NightSky RW is VMProtected - F*ck
Unpack VMProtect (original code not mutated|VT only packer and imports destroyed) -OK
Rebuild Imports in IDB -OK
Rebuild unpacked sample with reconstructed imports -OK
Reapair sample to be debuggable -> ASLR, Base, relocation, entrypoint etc etc.. -OK
Finding out it is using statically linked "MBED TLS" Crypto OpenSource lib -> Big mess F*ck
Generate FLIRT signatures ???
Trying out what linker and version was used -> Rich Header shredded -> F*ck
Trying out what linker and version was used again from optionalheader(linker ver.) + DIE -> MSVC 14.00
Downloading VS 2015 (linker version 14.00) + downloading 20 latest version of "MBED TLS" src code.
Figuring out what linker and compiler config was used.. (trying... trying ... trying...) -OK
Building 20 different lastest versions of MbedTLS.lib in VS 2015.
Generating FLIRT signatures for 20 different latest versions MbedTLS.lib -> f*ck collissions but ok MbedTLS.sig created - OK
Applying FLIRT signatures in IDB to find out what version of lib has most recognized functions -> looks like 2.23-4 version.
Building MbedTLS.dll + pdb(Release, x64, no /GS) in VS 2015 (MbedTLS version 2.24) -> .lib for FLIRT, .dll+pdb for fuzzy and bindiff (diaphora, bindiff, rizzo signatures, fingermatch) and extracting types from IDB.
Load MbedTLS.dll + pdb to IDA -> export types as IDC, export rizzo signatures (rizzo IDA plugin), export fingermatch, export diaphora sqlite db (diaphora IDA plugin)
Load unpacked repaired+import reconstructed debuggable NightSky RW sample to IDA -OK
Applying all possible FLIRT signatures for VC64 (cca 3-4) -OK
Applying IDC script of exported types from (MbedTLS.dll + pdb) - types imported -OK
Applying generated FLIRT signatures from MbedTLS.lib version 2.24 -OK
Applying rizzo signatures exported from (MbedTLS.dll + pdb) -OK
Applying fingermatch signatures exported from (MbedTLS.dll + pdb) -OK
Diaphora diff current IDB to exported sqliteDB from (MbedTLS.dll + pdb) - manually check and import relaible recognized funcs - OK
Recognized functions in .text segment before 4/700 vs now  649/720 -OK can live with that :)
Applying imported types, enums and structures to interesting functions.
Finally reversing - understanding, annotating, recognize rest of functions.
After analytical conslusions, test decryption with my own spoofed public RSA key.
Done.

 

Notes:
VMProtected.
Using MBED TLS statically linked - for Cryptofuncs
TAs embedded RSA2048 public key in PEM format
Generating Victim RSA2048 privat+public key.
Maxfilesize encrypted - 1572864 bytes (3*blocksize - 524288)
Using AES 128 CBC to encrypt file content.
AES key is generate with MBEDTLS prng and IV is hardcoded (bytesIV = 04030201040302010403020104030201).
Aes key is encrypted with Victim RSA2048 public key and added to encrypted file content.(256 bytes)
Victim private RSA2048 key is encrypted with TAs embedded RSA2048 public key and added to encrypted file content.(2304bytes)



